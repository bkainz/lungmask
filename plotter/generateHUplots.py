import numpy as np
from matplotlib import pyplot as plt
import streamlit as st

x = np.array([-1008.76, -993.52, -978.28, -963.04, -947.8, -932.56, -917.32, -902.08
, -886.84, -871.6, -856.36, -841.12, -825.88, -810.64, -795.4, -780.16
, -764.92, -749.68, -734.44, -719.2, -703.96, -688.72, -673.48, -658.24
, -643., -627.76, -612.52, -597.28, -582.04, -566.8, -551.56, -536.32
, -521.08, -505.84, -490.6, -475.36, -460.12, -444.88, -429.64, -414.4
, -399.16, -383.92, -368.68, -353.44, -338.2, -322.96, -307.72, -292.48
, -277.24, -262., -246.76, -231.52, -216.28, -201.04, -185.8, -170.56
, -155.32, -140.08, -124.84, -109.6, -94.36, -79.12, -63.88, -48.64
, -33.4, -18.16, -2.92, 12.32, 27.56, 42.8, 58.04, 73.28
, 88.52, 103.76, 119., 134.24, 149.48, 164.72, 179.96, 195.2
, 210.44, 225.68, 240.92, 256.16, 271.4, 286.64, 301.88, 317.12
, 332.36, 347.6, 362.84, 378.08, 393.32, 408.56, 423.8, 439.04
, 454.28, 469.52, 484.76, 500. ])
y = [np.array([0.01970457, 0.05245232, 0.08796431, 0.13087265, 0.18406081, 0.23957428
, 0.29848375, 0.35861772, 0.42146732, 0.47708406, 0.52812331, 0.5737371
, 0.61640107, 0.65114264, 0.68139218, 0.70782694, 0.73253563, 0.75302051
, 0.77138938, 0.78782532, 0.80345701, 0.81650447, 0.82822174, 0.83872743
, 0.84883257, 0.85745928, 0.86532334, 0.87253002, 0.87919255, 0.88577998
, 0.89153408, 0.89687947, 0.90187571, 0.90686513, 0.91126256, 0.91537329
, 0.91924833, 0.92313315, 0.92656402, 0.92979731, 0.93283448, 0.93590286
, 0.93863031, 0.94121736, 0.94365303, 0.94613185, 0.94833813, 0.95041538
, 0.95238835, 0.95440837, 0.9561897, 0.95789936, 0.95952303, 0.96107451
, 0.96265686, 0.96408184, 0.96544218, 0.96673879, 0.96807931, 0.96927955
, 0.97045602, 0.97158663, 0.97275175, 0.97382353, 0.97486448, 0.97588715
, 0.9769798, 0.97798708, 0.97898872, 0.9799938, 0.98106635, 0.98208235
, 0.98306759, 0.98404408, 0.98505837, 0.98598246, 0.98690603, 0.9878008
, 0.98869397, 0.98961385, 0.99044271, 0.99124108, 0.99199192, 0.99273207
, 0.99335877, 0.99392359, 0.99443746, 0.99493137, 0.99535897, 0.99576032
, 0.99612861, 0.99649876, 0.99682364, 0.99712978, 0.99741517, 0.99769539
, 0.99794334, 0.99816977, 0.99837968, 0.99858161]),  
np.array([0.02194595, 0.05513509, 0.09229664, 0.13590358, 0.18848538, 0.24203909
, 0.29813195, 0.35474916, 0.41348612, 0.46528876, 0.51277893, 0.55545455
, 0.59565084, 0.62883625, 0.6582165,  0.6846033,  0.71010987, 0.73189267
, 0.75182362, 0.76986443, 0.78725096, 0.8018588,  0.8149891,  0.82678329
, 0.8380918,  0.84757132, 0.85609911, 0.86385201, 0.87092862, 0.87781274
, 0.88372585, 0.8891812,  0.89424497, 0.89927914, 0.90368249, 0.90783561
, 0.91173758, 0.91569187, 0.91915689, 0.9224869,  0.92562288, 0.92886501
, 0.93174104, 0.93449926, 0.93713788, 0.93984504, 0.94227701, 0.9446258
, 0.94687406, 0.94917943, 0.95124798, 0.95324519, 0.95518308, 0.95703937
, 0.95896062, 0.9606946,  0.96236904, 0.96398528, 0.96567288, 0.96718909
, 0.96867755, 0.97011172, 0.97159965, 0.97296209, 0.97427617, 0.97554752
, 0.97687087, 0.97809274, 0.97926258, 0.98041033, 0.9815992,  0.98268417
, 0.98374461, 0.98479106, 0.98586547, 0.98684354, 0.98779827, 0.98871442
, 0.98959717, 0.99049761, 0.99128919, 0.99204424, 0.9927392,  0.99341616
, 0.99400504, 0.99453422, 0.99501228, 0.99548095, 0.99587961, 0.9962479
, 0.9965951,  0.99693418, 0.99722638, 0.99749377, 0.99774082, 0.99798406
, 0.99819255, 0.99838241, 0.99855412, 0.99872614])]
e = [np.array([0.0323586, 0.06907186, 0.113313, 0.16046717, 0.2097291,  0.2527143
, 0.29124783, 0.32486198, 0.35537037, 0.37915382, 0.39866613, 0.41385215
, 0.42485133, 0.42995365, 0.4298779, 0.42436851, 0.41316992, 0.39810021
, 0.37956827, 0.35944453, 0.33739601, 0.3173536,  0.29824573, 0.28034503
, 0.26255409, 0.24696863, 0.23238917, 0.21867451, 0.20577111, 0.19268531
, 0.18104911, 0.17011663, 0.15982004, 0.14952743, 0.14027833, 0.13163176
, 0.12357576, 0.11546965, 0.10833759, 0.10164095, 0.09546665, 0.08928759
, 0.08383732, 0.07868737, 0.07397238, 0.06919845, 0.06499394, 0.06114817
, 0.05759533, 0.05396801, 0.05077243, 0.04780964, 0.04505149, 0.04249353
, 0.0399596, 0.03774187, 0.03565287, 0.03374939, 0.03177294, 0.03012894
, 0.02846724, 0.02692806, 0.02537623, 0.02396044, 0.02260269, 0.02124824
, 0.01974875, 0.01838039, 0.01702971, 0.01566403, 0.01423258, 0.01290591
, 0.01177945, 0.01076006, 0.009855, 0.00915908, 0.00855637, 0.00808808
, 0.00773477, 0.00753193, 0.00750211, 0.00759279, 0.00775584, 0.00794217
, 0.00804776, 0.00803404, 0.00793987, 0.00774847, 0.00750224, 0.00719824
, 0.00686894, 0.00648617, 0.00610948, 0.00572094, 0.00533354, 0.00493231
, 0.00454418, 0.00418478, 0.00384914, 0.00350719]), 
np.array([0.04242053, 0.09112836, 0.14925369, 0.20760457, 0.26459611, 0.3109727
, 0.35041584, 0.38365021, 0.41300293, 0.43549087, 0.45354223, 0.46727527
, 0.47661507, 0.4793375,  0.47552879, 0.46459761, 0.4455731,  0.42261161
, 0.3966772,  0.37006353, 0.3424505,  0.31847978, 0.29681428, 0.27755631
, 0.25927739, 0.24435626, 0.23129432, 0.21963591, 0.20918962, 0.19915958
, 0.19067846, 0.18283346, 0.17555081, 0.16823775, 0.16175394, 0.15560262
, 0.14973567, 0.14366255, 0.13830689, 0.13301906, 0.12794147, 0.12258836
, 0.11776083, 0.11303643, 0.10846431, 0.10372226, 0.09932597, 0.09502065
, 0.09083681, 0.08648551, 0.08251107, 0.07864838, 0.07484204, 0.07113586
, 0.06728551, 0.06375911, 0.06029932, 0.0569549,  0.05336275, 0.05013326
, 0.0469273,  0.04381104, 0.04056685, 0.03751252, 0.03461642, 0.03176409
, 0.02882404, 0.02607862, 0.02350898, 0.02102634, 0.01857794, 0.01642096
, 0.01441767, 0.01259144, 0.01086717, 0.0094947,  0.00834685, 0.00745833
, 0.00686031, 0.00650512, 0.00640898, 0.00647021, 0.0065983,  0.00673977
, 0.00680505, 0.00678809, 0.00669005, 0.00652094, 0.00632327, 0.00609547
, 0.00585298, 0.00558265, 0.00530312, 0.00502344, 0.0047356,  0.00442663
, 0.00413144, 0.00384555, 0.00356563, 0.00326357])]



def analyze(img, msk, num_thresholds = 100):
    X = img[msk].flatten()
    X = X[X>-1024]
    num_pts = len(X.flatten())

    min_hu = -1024
    max_hu = 500
    step = (max_hu - min_hu) / num_thresholds
    thresholds = list(np.arange(min_hu+step, max_hu+step, step))
    counts = [len(X[X < t].flatten()) / num_pts for t in thresholds] 
    
    return counts, thresholds

def plotGraph(img, msk, label = 1):
    counts, _ = analyze(img, msk == label)
    z = np.array(counts)
    plt.plot(x, y[label-1], 'g-')
    plt.fill_between(x, y[label-1]-e[label-1], np.clip(y[label-1]+e[label-1], 0.0, 1.0), color='lightgreen')
    plt.plot(x, z, 'r-', linewidth=3)
    plt.grid()

def generateHUPlots(img, msk, num_labels):
    plt.figure(figsize=(8, 4))
    for n in range(num_labels):
        lbl  = n+1
        plt.subplot(120+lbl)
        plotGraph(img, msk, label = lbl)
        plt.title('Patient label ' + str(lbl) )#+ subject_name)
    plt.tight_layout()
    st.pyplot()